#pragma once

#include <UE/structs.h>

// Net Native Functions Addresses
inline uint64_t GetNetModeAddress = 0;
inline uint64_t LpSpawnPlayActorAddress = 0;
inline uint64_t TickFlushAddress = 0;
inline uint64_t KickPlayerAddress = 0;
inline uint64_t WorldNotifyControlMessageAddress = 0;
inline uint64_t SpawnPlayActorAddress = 0;
inline uint64_t BeaconNotifyControlMessageAddress = 0;
inline uint64_t ReceiveFStringAddress = 0;
inline uint64_t ReceiveUniqueIdReplAddress = 0;
inline uint64_t WelcomePlayerAddress = 0;
inline uint64_t InitListenAddress = 0;
inline uint64_t InitHostAddress = 0;
inline uint64_t PauseBeaconRequestsAddress = 0;
inline uint64_t NetDebugAddress = 0;
inline uint64_t ChallengeAddress = 0;
inline uint64_t SendChallengeAddress = 0;
inline uint64_t SetWorldAddress = 0;
inline uint64_t NoReserveAddress = 0;
inline uint64_t ClientTravelAddress = 0;
inline uint64_t CreateNetDriverAddress = 0;
inline uint64_t HasClientLoadedCurrentWorldAddress = 0;
inline uint64_t FixCrashAddress = 0;
inline uint64_t MalformedAddress = 0;
inline uint64_t SetReplicationDriverAddress = 0;
inline uint64_t ValidationFailureAddress = 0;
inline uint64_t CollectGarbageAddress = 0;
inline uint64_t GetPlayerViewpointAddress = 0;
inline uint64_t CreateNetDriverLocalAddress = 0;
inline uint64_t HandleReloadCostAddress = 0;
inline uint64_t CanActivateAbilityAddress = 0;
inline uint64_t CallPreReplicationAddress = 0;
inline uint64_t ReplicateActorAddress = 0;
inline uint64_t SendClientAdjustmentAddress = 0;
inline uint64_t SetChannelActorAddress = 0;
inline uint64_t CreateChannelAddress = 0;
inline uint64_t PlayMontageAddress = 0;
inline uint64_t ValidENameAddress = 0;
inline uint64_t ReplicationGraphEnableAddress = 0;
inline uint64_t RequestExitWsAddress = 0;
inline uint64_t StaticLoadObjectAddress = 0;
inline uint64_t GiveAbilityAddress = 0;
inline uint64_t InternalTryActivateAbilityAddress = 0;
inline uint64_t MarkAbilitySpecDirtyAddress = 0;
inline uint64_t CreateNamedNetDriverAddress = 0;

// Net Native Functions
// Do not use parameters names for readability
static void (*RequestExitWithStatus)(bool, uint8_t);
static char (__fastcall* ValidationFailure)(long long*, long long);
static void (*SendChallenge)(UObject*, UObject*);
static long long (__fastcall* Challenge)(long long, long long, int);
static UObject* (__fastcall* EnableReplicationGraph)(UObject*, UObject*);
static UObject* (*CreateChannelByName)(UObject*, FName*, EChannelCreateFlags, int32_t);
static void (*SetChannelActor)(UObject*, UObject*);
static UObject* (*CreateChannel)(UObject*, EChannelType, bool, int32_t);
static void (__fastcall* SendClientAdjustment)(UObject*);
static void (__fastcall* CallPreReplication)(UObject*, UObject*);
static char (__fastcall* ReplicateActor)(UObject*);
static char (*KickPlayer)(UObject*, UObject*, FText);
static void (__fastcall* HandleReloadCost)(UObject*, int);
static long long (*GetNetMode)(long long*);
static bool (*LpSpawnPlayActor)(UObject*, const FString&, FString&, UObject*);
static void (__fastcall* GetPlayerViewPoint)(UObject*, FVector*, FRotator*);
static void* (*SetWorld)(UObject*, UObject*);
static bool (*InitListen)(UObject*, void*, FURL&, bool, FString&);
static void (*TickFlush)(UObject*, float);
static void (*RepGraphServerReplicateActors)(UObject*);
static void (*ReceiveFString)(void*, FString&);
static void (*ReceiveUniqueIdRepl)(void*, void*);
static void (*WelcomePlayer)(UObject*, UObject*);
static void (*WorldNotifyControlMessage)(UObject*, UObject*, uint8_t, void*);
static UObject* (*SpawnPlayActor)(UObject*, UObject*, ENetRole, FURL&, void*, FString&, uint8_t);
inline bool (*InitHost)(UObject*);
inline void (*BeaconNotifyControlMessage)(UObject*, UObject*, uint8_t, void*);
inline void (*PauseBeaconRequests)(UObject*, bool);
static void* (*NetDebug)(UObject*);
static long long (__fastcall* ClientTravel)(UObject*, const FString&, ETravelType, bool, FGuid);
static UObject* (*CreateNetDriver)(UObject*, UObject*, FName);
static bool (__fastcall* HasClientLoadedCurrentWorld)(UObject*);
static long long (__fastcall* FixCrash)(int32_t*, long long, int*);
static void (__fastcall* SetReplicationDriver)(UObject*, UObject*);
static char (__fastcall* Malformed)(long long, long long);
static char (__fastcall* NoReserve)(long long*, long long, char, long long*);
static FGameplayAbilitySpecHandle* (*GiveAbility)(UObject*, FGameplayAbilitySpecHandle*, FGameplayAbilitySpec<FGameplayAbilityActivationInfo>);
static FGameplayAbilitySpecHandle* (*GiveAbilityTest)(UObject*, FGameplayAbilitySpecHandle*, long long);
static FGameplayAbilitySpecHandle* (*GiveAbilityFts)(UObject*, FGameplayAbilitySpecHandle*, FGameplayAbilitySpec<FGameplayAbilityActivationInfoFTS>);
static FGameplayAbilitySpecHandle* (*GiveAbilityNewer)(UObject*, FGameplayAbilitySpecHandle*, FGameplayAbilitySpecNewer);
static bool (*InternalTryActivateAbility)(UObject*, FGameplayAbilitySpecHandle, FPredictionKey, UObject**, void*, long long*);
static bool (*InternalTryActivateAbilityFts)(UObject*, FGameplayAbilitySpecHandle, FPredictionKeyFTS, UObject**, void*, long long*);
static void (*MarkAbilitySpecDirtyOld)(UObject*, FGameplayAbilitySpec<FGameplayAbilityActivationInfo>&);
static void (*MarkAbilitySpecDirtyFts)(UObject*, FGameplayAbilitySpec<FGameplayAbilityActivationInfoFTS>&);
inline UObject* (*CreateNetDriverLocal)(UObject*, UObject*, FName);
inline float (*PlayMontage)(UObject*, UObject*, FGameplayAbilityActivationInfo, UObject*, float, FName);
inline long long (*CollectGarbage)(long long);